// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * Metadata about all bodies of a particular type.
 */
public final class BodyTypeMetadata extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static BodyTypeMetadata getRootAsBodyTypeMetadata(ByteBuffer _bb) { return getRootAsBodyTypeMetadata(_bb, new BodyTypeMetadata()); }
  public static BodyTypeMetadata getRootAsBodyTypeMetadata(ByteBuffer _bb, BodyTypeMetadata obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BodyTypeMetadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The relevant type.
   */
  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The spawn source.
   */
  public byte spawnSource() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The cost of the type, in influence.
   */
  public int cost() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The current conviction
   */
  public int conviction() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The current power, in influence
   */
  public int power() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The number of cooldowns between every two actions.
   */
  public int actionCooldown() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The maximum distance squared this type can sense other robots.
   */
  public int visionRange() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The maximum distance squared this type can affect other robots.
   */
  public int actionRange() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createBodyTypeMetadata(FlatBufferBuilder builder,
      byte type,
      byte spawnSource,
      int cost,
      int conviction,
      int power,
      int actionCooldown,
      int visionRange,
      int actionRange) {
    builder.startTable(8);
    BodyTypeMetadata.addActionRange(builder, actionRange);
    BodyTypeMetadata.addVisionRange(builder, visionRange);
    BodyTypeMetadata.addActionCooldown(builder, actionCooldown);
    BodyTypeMetadata.addPower(builder, power);
    BodyTypeMetadata.addConviction(builder, conviction);
    BodyTypeMetadata.addCost(builder, cost);
    BodyTypeMetadata.addSpawnSource(builder, spawnSource);
    BodyTypeMetadata.addType(builder, type);
    return BodyTypeMetadata.endBodyTypeMetadata(builder);
  }

  public static void startBodyTypeMetadata(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addSpawnSource(FlatBufferBuilder builder, byte spawnSource) { builder.addByte(1, spawnSource, 0); }
  public static void addCost(FlatBufferBuilder builder, int cost) { builder.addInt(2, cost, 0); }
  public static void addConviction(FlatBufferBuilder builder, int conviction) { builder.addInt(3, conviction, 0); }
  public static void addPower(FlatBufferBuilder builder, int power) { builder.addInt(4, power, 0); }
  public static void addActionCooldown(FlatBufferBuilder builder, int actionCooldown) { builder.addInt(5, actionCooldown, 0); }
  public static void addVisionRange(FlatBufferBuilder builder, int visionRange) { builder.addInt(6, visionRange, 0); }
  public static void addActionRange(FlatBufferBuilder builder, int actionRange) { builder.addInt(7, actionRange, 0); }
  public static int endBodyTypeMetadata(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BodyTypeMetadata get(int j) { return get(new BodyTypeMetadata(), j); }
    public BodyTypeMetadata get(BodyTypeMetadata obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

