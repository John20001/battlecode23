namespace battlecode.schema;

/// A vector in two-dimensional space. Discrete space, of course.
/// Defaults to the 0 vector.
struct Vec {
    x: int = 0;
    y: int = 0;
}

/// A table of vectors.
table VecTable {
    xs: [int];
    ys: [int];
}


/// A table of RGB values.
table RGBTable {
    red: [int];
    green: [int];
    blue: [int];
}

/// The possible types of things that can exist.
/// Note that bullets are not treated as bodies.
enum BodyType : byte {
    /// Enlightenment centers produce politicians, scandals and slanderers and place bids
    ///can be neutral until captured
    ENLIGHTENMENT_CENTER,
    /// politicians use their influence to self destruct and capture other units
    POLITICIAN,
    /// scandals generate passive influence for the enlightenment center that created them
    /// they turn into politicians at some point, and can only be identified by slanderers.
    SCANDAL,
    /// have the ability to identify scandals
    MUCKRAKER,
}

/// A list of new bodies to be placed on the map.
table SpawnedBodyTable {
    /// The numeric ID of the new bodies.
    /// Will never be negative.
    /// There will only be one body with a particular ID at a time.
    /// So, there will never be two robots with the same ID, or a robot and
    /// a building with the same ID.
    robotIDs: [int];
    /// The teams of the new bodies.
    teamIDs: [byte];
    /// The types of the new bodies.
    types: [BodyType];
    /// The locations of the bodies.
    locs: VecTable;
}

/// The map a round is played on.
table GameMap {
    /// The name of a map.
    name: string;
    /// The bottom corner of the map.
    minCorner: Vec;
    /// The top corner of the map.
    maxCorner: Vec;
    /// The bodies on the map.
    bodies: SpawnedBodyTable;
    /// The random seed of the map.
    randomSeed: int;
    /// Whether locations are passable
    passable: [bool];
}

/// Actions that can be performed.
/// Purely aesthetic; have no actual effect on simulation.
/// (Although the simulation may want to track the 'parents' of
/// particular robots.)
/// Actions may have 'targets', which are the units on which
/// the actions were performed.
enum Action : byte {
    /// politicians self-destruct and affect nearby bodies
    /// Target: none
    EMPOWER,
    /// scandals turn into politicians.
    /// Target: self.
    CAMOUFLAGE,
    /// slanders are alowed to TODO.
    /// Target: TODO.
    EMBEZZLE,
    /// slanderers can expose a scandal.
    /// Target: an enemy body.
    EXPOSE,
    /// units can change their flag.
    /// Target: self.
    SET_FLAG,
    /// units can get the flag of another unit
    /// Target: another unit.
    GET_FLAG,
    /// Builds a unit (enlightent center).
    /// Target: spawned unit
    SPAWN_UNIT,
    /// places a bid (enlightent center).
    /// Target: bid placed
    PLACE_BID,
    /// a robot can change team after being empowered
    /// Target: self
    CHANGE_TEAM,
    /// an enlightenment center can become neutral if lost all its influence
    /// Target: none.
    BECOME_NEUTRAL,
    /// Dies due to an uncaught exception
    /// Target: none
    DIE_EXCEPTION
}

// Metadata

/// Metadata about all bodies of a particular type.
table BodyTypeMetadata {
    /// The relevant type.
    type: BodyType;
    /// The spawn source.
    spawnSource: BodyType;
    /// The cost of the type, in influence.
    cost: int;
    /// The current conviction
    conviction: int;
    /// The current power, in influence
    power: int;
    /// The number of cooldowns between every two actions.
    actionCooldown: int;
    /// The maximum distance squared this type can sense other robots.
    visionRange: int;
    /// The maximum distance squared this type can affect other robots.
    actionRange: int;
}

/// Data relevant to a particular team.
table TeamData {
    /// The name of the team.
    name: string;
    /// The java package the team uses.
    packageName: string;
    /// The ID of the team this data pertains to.
    teamID: byte;
}

// Events

/// An Event is a single step that needs to be processed.
/// A saved game simply consists of a long list of Events.
/// Events can be divided by either being sent separately (e.g. as separate
/// websocket messages), or by being wrapped with a GameWrapper.
/// A game consists of a series of matches; a match consists of a series of
/// rounds, and is played on a single map. Each round is a single simulation
/// step.
union Event {
    /// There should only be one GameHeader, at the start of the stream.
    GameHeader,
    /// There should be one MatchHeader at the start of each match.
    MatchHeader,
    /// A single simulation step. A round may be skipped if
    /// nothing happens during its time.
    Round,
    /// There should be one MatchFooter at the end of each simulation step.
    MatchFooter,
    /// There should only be one GameFooter, at the end of the stream.
    GameFooter
}

/// The first event sent in the game. Contains all metadata about the game.
table GameHeader {
    /// The version of the spec this game complies with.
    specVersion: string;
    /// The teams participating in the game.
    teams: [TeamData];
    /// Information about all body types in the game.
    bodyTypeMetadata: [BodyTypeMetadata];
}

/// The final event sent in the game.
table GameFooter {
    /// The ID of the winning team of the game.
    winner: byte;
}

/// Sent to start a match.
table MatchHeader {
    /// The map the match was played on.
    map: GameMap;
    /// The maximum number of rounds in this match.
    maxRounds: int;
}

/// Sent to end a match.
table MatchFooter {
    /// The ID of the winning team.
    winner: byte;
    /// The number of rounds played.
    totalRounds: int;
}

/// A single time-step in a Game.
/// The bulk of the data in the file is stored in tables like this.
/// Note that a struct-of-arrays format is more space efficient than an array-
/// of-structs.
table Round {
    /// The IDs of teams in the Game.
    teamIDs: [int];
    /// The bids of the teams.
    teamBids: [int];

    /// The IDs of bodies that moved.
    movedIDs: [int];
    /// The new locations of bodies that have moved.
    movedLocs: VecTable;

    /// New bodies.
    spawnedBodies: SpawnedBodyTable;

    /// The IDs of bodies that died (drowned units and shot drones).
    diedIDs: [int];

    /// The IDs of robots that performed actions.
    /// IDs may repeat.
    actionIDs: [int];
    /// The actions performed. These actions allow us to track how much soup or dirt a body carries.
    actions: [Action];
    /// The 'targets' of the performed actions. Actions without targets may have
    /// any target (typically 0).
    actionTargets: [int];

    /// The IDs of bodies that set indicator dots
    indicatorDotIDs: [int];
    /// The location of the indicator dots
    indicatorDotLocs: VecTable;
    /// The RGB values of the indicator dots
    indicatorDotRGBs: RGBTable;

    /// The IDs of bodies that set indicator lines
    indicatorLineIDs: [int];
    /// The start location of the indicator lines
    indicatorLineStartLocs: VecTable;
    /// The end location of the indicator lines
    indicatorLineEndLocs: VecTable;
    /// The RGB values of the indicator lines
    indicatorLineRGBs: RGBTable;

    /// All logs sent this round.
    /// Messages from a particular robot in this round start on a new line, and
    /// have a header:
    /// '[' $TEAM ':' $ROBOTTYPE '#' $ID '@' $ROUND '] '
    /// $TEAM = 'A' | 'B'
    /// $ROBOTTYPE = 'HQ' | 'VAPORATOR' | 'LANDSCAPER' 
    ///            | 'DELIVERY_DRONE' | 'REFINERY' | 'MINER' | other names...
    /// $ID = a number
    /// $ROUND = a number
    /// The header is not necessarily followed by a newline.
    /// This header should only be sent once per robot per round (although
    /// players may forge it, so don't crash if you get strange input.)
    ///
    /// You should try to only read this value once, and cache it. Reading
    /// strings from a flatbuffer is much less efficient than reading other
    /// buffers, because they need to be copied into an environment-provided
    /// buffer and validated.
    ///
    /// (haha i guess you can never really escape string parsing can you)
    logs: string;

    /// The first sent Round in a match should have index 1. (The starting state,
    /// created by the MatchHeader, can be thought to have index 0.)
    /// It should increase by one for each following round.
    roundID: int;

    /// The IDs of player bodies.
    bytecodeIDs: [int];
    /// The bytecodes used by the player bodies.
    bytecodesUsed: [int];
}

/// Necessary due to flatbuffers requiring unions to be wrapped in tables.
table EventWrapper {
    e: Event;
}

/// If events are not otherwise delimited, this wrapper structure
/// allows a game to be stored in a single buffer.
/// The first event will be a GameHeader; the last event will be a GameFooter.
/// matchHeaders[0] is the index of the 0th match header in the event stream,
/// corresponding to matchFooters[0]. These indices allow quick traversal of
/// the file.
table GameWrapper {
    /// The series of events comprising the game.
    events: [EventWrapper];
    /// The indices of the headers of the matches, in order.
    matchHeaders: [int];
    /// The indices of the footers of the matches, in order.
    matchFooters: [int];
}
